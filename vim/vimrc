runtime bundle/vim-pathogen/autoload/pathogen.vim
execute pathogen#infect()

set directory=$HOME/tmp/vimswap//

syntax on
" enable default file type detection
filetype plugin indent on
set number
set autoindent

" make navigating splits more succinct, copied from
" https://teamgaslight.com/blog/vim-plus-tmux-a-perfect-match
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l

" Alternative to <Esc> for insert mode, necessitated by the touchbar.
"
" This is only safe if also using the bracketed-paste plugin.  Otherwise
" pasting text containing this sequence is interpreted as <Esc> and anything
" that follows the sequence is executed as normal mode commands.
"
" kj is very fast to type and uncommon enough to not cause problems in insert
" mode.  It would cause problems in visual mode, where these keys are used for
" navigation.  It's not clear if there's a combination that is unobtrusive in
" all modes, so that escape behaviour can be kept consistent.  Falling back on
" <ctrl-[>, while harder to type, should cover the other modes.
inoremap kj <Esc>

" buggy on macOS:
"set cursorline " underline current line

" without these, acts like vi, limiting what you can backspace over:
set backspace=indent,eol,start

" show cursor position & file percentage in status bar:
set ruler

" vsplit buffers to to the right of the current one
" because this seems more natural to me for some reason
set splitright

" Hides statusline if there's only one window.
" vim default, which neovim changed to 2.
set laststatus=1

" fzf search through file names in the current git repository
nnoremap <leader>f :GFiles<CR>

" Go stuff:
"
" goimports on save instead of gofmt.  Just makes managing imports easier
let g:go_fmt_command = "goimports"
" from https://github.com/fatih/vim-go-tutorial
" These may have too big of a performance impact so they're sometimes commented out.
" automatically call :GoInfo on hover
let g:go_auto_type_info = 1
" automatically highlight matching identifiers on hover, :GoSameIds
let g:go_auto_sameids = 1
" vim-go's smartness seems to prepend incorrect paths to GOPATH, but the
" smartness is only needed for alternative vendoring tools which I don't use
" so it can be completely disabled:
" Rendering in vim-go seems to get messed up often, so this is an efficient redraw.
nnoremap <leader>r :redr!<CR>

autocmd FileType go nmap <Leader>c <Plug>(go-coverage-toggle)
autocmd FileType go nmap <Leader>tc <Plug>(go-test-compile)
" Wishlist for searching declarations:
" - make it universal to the project
" - possibly filter out test code if not in a test file
" - when hovering on an identifier, show only relevant decls
"   (eg methods on a type)
autocmd FileType go nmap <Leader>d :GoDeclsDir<cr>

" Copied from https://github.com/fatih/vim-go-tutorial
" Open corresponding test(ed) file in place or split
autocmd Filetype go command! -bang A call go#alternate#Switch(<bang>0, 'edit')
autocmd Filetype go command! -bang AV call go#alternate#Switch(<bang>0, 'vsplit')
autocmd Filetype go command! -bang AS call go#alternate#Switch(<bang>0, 'split')
